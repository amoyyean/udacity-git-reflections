How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It was helpful because it saved the time to find the bug by focusing on only the changes of file content.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    The programmer is able to easily track the outcome of the scripts and manage his/her program.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros of manually commit: clear logic, more control
    Cons of manually commit: changes could be lost if the programmer forgets to commit or accident happens

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    If multiple files have logic connections and could change simultaneously for one purpose, the capability to commit them by one action is easier and efficient to track the project changes.

How can you use the commands git log and git diff to view the history of files?

    I can use git log to find commit id and its message, and use "git diff first id second id" command to view the difference between files of specified id

How might using version control make you more confident to make changes that
could break something?

    I can always revert back to a previous version when thing is not broken.

Now that you have your workspace set up, what do you want to try using Git for?

    Learn Git with both Udacity and liaoxuefeng courses, then learn to commit my future Udacity project files through Git.
